package gen.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import gen.greendao.bean.KBAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KBACCOUNT".
*/
public class KBAccountDao extends AbstractDao<KBAccount, String> {

    public static final String TABLENAME = "KBACCOUNT";

    /**
     * Properties of entity KBAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PhoneNumber = new Property(0, String.class, "phoneNumber", true, "PHONE_NUMBER");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property LastUpdateTime = new Property(3, java.util.Date.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property HeadImgUrl = new Property(5, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property CurrentUser = new Property(6, Boolean.class, "currentUser", false, "CURRENT_USER");
        public final static Property CodeId = new Property(7, String.class, "codeId", false, "CODE_ID");
    }


    public KBAccountDao(DaoConfig config) {
        super(config);
    }
    
    public KBAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KBACCOUNT\" (" + //
                "\"PHONE_NUMBER\" TEXT PRIMARY KEY NOT NULL ," + // 0: phoneNumber
                "\"PASSWORD\" TEXT," + // 1: password
                "\"USER_ID\" TEXT NOT NULL UNIQUE ," + // 2: userId
                "\"LAST_UPDATE_TIME\" INTEGER," + // 3: lastUpdateTime
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"HEAD_IMG_URL\" TEXT," + // 5: headImgUrl
                "\"CURRENT_USER\" INTEGER," + // 6: currentUser
                "\"CODE_ID\" TEXT);"); // 7: codeId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_KBACCOUNT_PHONE_NUMBER ON KBACCOUNT" +
                " (\"PHONE_NUMBER\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KBACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KBAccount entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPhoneNumber());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
        stmt.bindString(3, entity.getUserId());
 
        java.util.Date lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindLong(4, lastUpdateTime.getTime());
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(6, headImgUrl);
        }
 
        Boolean currentUser = entity.getCurrentUser();
        if (currentUser != null) {
            stmt.bindLong(7, currentUser ? 1L: 0L);
        }
 
        String codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindString(8, codeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KBAccount entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPhoneNumber());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
        stmt.bindString(3, entity.getUserId());
 
        java.util.Date lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindLong(4, lastUpdateTime.getTime());
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(6, headImgUrl);
        }
 
        Boolean currentUser = entity.getCurrentUser();
        if (currentUser != null) {
            stmt.bindLong(7, currentUser ? 1L: 0L);
        }
 
        String codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindString(8, codeId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public KBAccount readEntity(Cursor cursor, int offset) {
        KBAccount entity = new KBAccount( //
            cursor.getString(offset + 0), // phoneNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // lastUpdateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // currentUser
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // codeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KBAccount entity, int offset) {
        entity.setPhoneNumber(cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setLastUpdateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurrentUser(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCodeId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(KBAccount entity, long rowId) {
        return entity.getPhoneNumber();
    }
    
    @Override
    public String getKey(KBAccount entity) {
        if(entity != null) {
            return entity.getPhoneNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KBAccount entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
