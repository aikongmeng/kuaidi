package gen.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import gen.greendao.bean.INetCallInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INET_CALL_INFO".
*/
public class INetCallInfoDao extends AbstractDao<INetCallInfo, String> {

    public static final String TABLENAME = "INET_CALL_INFO";

    /**
     * Properties of entity INetCallInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Nclid = new Property(0, String.class, "nclid", true, "NCLID");
        public final static Property Called_name = new Property(1, String.class, "called_name", false, "CALLED_NAME");
        public final static Property Called = new Property(2, String.class, "called", false, "CALLED");
        public final static Property Create_time = new Property(3, String.class, "create_time", false, "CREATE_TIME");
        public final static Property CallDate = new Property(4, long.class, "callDate", false, "CALL_DATE");
        public final static Property TalkDuration = new Property(5, int.class, "talkDuration", false, "TALK_DURATION");
        public final static Property CallType = new Property(6, int.class, "callType", false, "CALL_TYPE");
        public final static Property Id = new Property(7, int.class, "id", false, "ID");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
        public final static Property Flag = new Property(9, boolean.class, "flag", false, "FLAG");
        public final static Property Extra = new Property(10, String.class, "extra", false, "EXTRA");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
        public final static Property UserId = new Property(12, String.class, "userId", false, "USER_ID");
        public final static Property DisNum = new Property(13, String.class, "disNum", false, "DIS_NUM");
        public final static Property Recordurl = new Property(14, String.class, "recordurl", false, "RECORDURL");
        public final static Property Fee = new Property(15, double.class, "fee", false, "FEE");
        public final static Property CallState = new Property(16, int.class, "callState", false, "CALL_STATE");
    }


    public INetCallInfoDao(DaoConfig config) {
        super(config);
    }
    
    public INetCallInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INET_CALL_INFO\" (" + //
                "\"NCLID\" TEXT PRIMARY KEY NOT NULL ," + // 0: nclid
                "\"CALLED_NAME\" TEXT," + // 1: called_name
                "\"CALLED\" TEXT NOT NULL ," + // 2: called
                "\"CREATE_TIME\" TEXT," + // 3: create_time
                "\"CALL_DATE\" INTEGER NOT NULL ," + // 4: callDate
                "\"TALK_DURATION\" INTEGER NOT NULL ," + // 5: talkDuration
                "\"CALL_TYPE\" INTEGER NOT NULL ," + // 6: callType
                "\"ID\" INTEGER NOT NULL ," + // 7: id
                "\"STATUS\" TEXT," + // 8: status
                "\"FLAG\" INTEGER NOT NULL ," + // 9: flag
                "\"EXTRA\" TEXT," + // 10: extra
                "\"DESCRIPTION\" TEXT," + // 11: description
                "\"USER_ID\" TEXT NOT NULL ," + // 12: userId
                "\"DIS_NUM\" TEXT," + // 13: disNum
                "\"RECORDURL\" TEXT," + // 14: recordurl
                "\"FEE\" REAL NOT NULL ," + // 15: fee
                "\"CALL_STATE\" INTEGER NOT NULL );"); // 16: callState
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_INET_CALL_INFO_NCLID ON INET_CALL_INFO" +
                " (\"NCLID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INET_CALL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, INetCallInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNclid());
 
        String called_name = entity.getCalled_name();
        if (called_name != null) {
            stmt.bindString(2, called_name);
        }
        stmt.bindString(3, entity.getCalled());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
        stmt.bindLong(5, entity.getCallDate());
        stmt.bindLong(6, entity.getTalkDuration());
        stmt.bindLong(7, entity.getCallType());
        stmt.bindLong(8, entity.getId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
        stmt.bindLong(10, entity.getFlag() ? 1L: 0L);
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
        stmt.bindString(13, entity.getUserId());
 
        String disNum = entity.getDisNum();
        if (disNum != null) {
            stmt.bindString(14, disNum);
        }
 
        String recordurl = entity.getRecordurl();
        if (recordurl != null) {
            stmt.bindString(15, recordurl);
        }
        stmt.bindDouble(16, entity.getFee());
        stmt.bindLong(17, entity.getCallState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, INetCallInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNclid());
 
        String called_name = entity.getCalled_name();
        if (called_name != null) {
            stmt.bindString(2, called_name);
        }
        stmt.bindString(3, entity.getCalled());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
        stmt.bindLong(5, entity.getCallDate());
        stmt.bindLong(6, entity.getTalkDuration());
        stmt.bindLong(7, entity.getCallType());
        stmt.bindLong(8, entity.getId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
        stmt.bindLong(10, entity.getFlag() ? 1L: 0L);
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(11, extra);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
        stmt.bindString(13, entity.getUserId());
 
        String disNum = entity.getDisNum();
        if (disNum != null) {
            stmt.bindString(14, disNum);
        }
 
        String recordurl = entity.getRecordurl();
        if (recordurl != null) {
            stmt.bindString(15, recordurl);
        }
        stmt.bindDouble(16, entity.getFee());
        stmt.bindLong(17, entity.getCallState());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public INetCallInfo readEntity(Cursor cursor, int offset) {
        INetCallInfo entity = new INetCallInfo( //
            cursor.getString(offset + 0), // nclid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // called_name
            cursor.getString(offset + 2), // called
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_time
            cursor.getLong(offset + 4), // callDate
            cursor.getInt(offset + 5), // talkDuration
            cursor.getInt(offset + 6), // callType
            cursor.getInt(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
            cursor.getShort(offset + 9) != 0, // flag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // extra
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // description
            cursor.getString(offset + 12), // userId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // disNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // recordurl
            cursor.getDouble(offset + 15), // fee
            cursor.getInt(offset + 16) // callState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, INetCallInfo entity, int offset) {
        entity.setNclid(cursor.getString(offset + 0));
        entity.setCalled_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCalled(cursor.getString(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCallDate(cursor.getLong(offset + 4));
        entity.setTalkDuration(cursor.getInt(offset + 5));
        entity.setCallType(cursor.getInt(offset + 6));
        entity.setId(cursor.getInt(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFlag(cursor.getShort(offset + 9) != 0);
        entity.setExtra(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserId(cursor.getString(offset + 12));
        entity.setDisNum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRecordurl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFee(cursor.getDouble(offset + 15));
        entity.setCallState(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(INetCallInfo entity, long rowId) {
        return entity.getNclid();
    }
    
    @Override
    public String getKey(INetCallInfo entity) {
        if(entity != null) {
            return entity.getNclid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(INetCallInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
