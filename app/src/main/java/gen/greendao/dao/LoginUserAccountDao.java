package gen.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import gen.greendao.bean.LoginUserAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_USER_ACCOUNT".
*/
public class LoginUserAccountDao extends AbstractDao<LoginUserAccount, String> {

    public static final String TABLENAME = "LOGIN_USER_ACCOUNT";

    /**
     * Properties of entity LoginUserAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PhoneNumber = new Property(0, String.class, "phoneNumber", true, "PHONE_NUMBER");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property LastUpdateTime = new Property(2, java.util.Date.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property HeadImgUrl = new Property(4, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property CurrentUser = new Property(5, Boolean.class, "currentUser", false, "CURRENT_USER");
        public final static Property CodeId = new Property(6, String.class, "codeId", false, "CODE_ID");
        public final static Property IdImg = new Property(7, String.class, "idImg", false, "ID_IMG");
        public final static Property RealnameAuthStatus = new Property(8, String.class, "realnameAuthStatus", false, "REALNAME_AUTH_STATUS");
    }


    public LoginUserAccountDao(DaoConfig config) {
        super(config);
    }
    
    public LoginUserAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_USER_ACCOUNT\" (" + //
                "\"PHONE_NUMBER\" TEXT PRIMARY KEY NOT NULL ," + // 0: phoneNumber
                "\"USER_ID\" TEXT NOT NULL ," + // 1: userId
                "\"LAST_UPDATE_TIME\" INTEGER," + // 2: lastUpdateTime
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"HEAD_IMG_URL\" TEXT," + // 4: headImgUrl
                "\"CURRENT_USER\" INTEGER," + // 5: currentUser
                "\"CODE_ID\" TEXT," + // 6: codeId
                "\"ID_IMG\" TEXT," + // 7: idImg
                "\"REALNAME_AUTH_STATUS\" TEXT);"); // 8: realnameAuthStatus
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LOGIN_USER_ACCOUNT_PHONE_NUMBER ON LOGIN_USER_ACCOUNT" +
                " (\"PHONE_NUMBER\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_USER_ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginUserAccount entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPhoneNumber());
        stmt.bindString(2, entity.getUserId());
 
        java.util.Date lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindLong(3, lastUpdateTime.getTime());
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(5, headImgUrl);
        }
 
        Boolean currentUser = entity.getCurrentUser();
        if (currentUser != null) {
            stmt.bindLong(6, currentUser ? 1L: 0L);
        }
 
        String codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindString(7, codeId);
        }
 
        String idImg = entity.getIdImg();
        if (idImg != null) {
            stmt.bindString(8, idImg);
        }
 
        String realnameAuthStatus = entity.getRealnameAuthStatus();
        if (realnameAuthStatus != null) {
            stmt.bindString(9, realnameAuthStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginUserAccount entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPhoneNumber());
        stmt.bindString(2, entity.getUserId());
 
        java.util.Date lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindLong(3, lastUpdateTime.getTime());
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(5, headImgUrl);
        }
 
        Boolean currentUser = entity.getCurrentUser();
        if (currentUser != null) {
            stmt.bindLong(6, currentUser ? 1L: 0L);
        }
 
        String codeId = entity.getCodeId();
        if (codeId != null) {
            stmt.bindString(7, codeId);
        }
 
        String idImg = entity.getIdImg();
        if (idImg != null) {
            stmt.bindString(8, idImg);
        }
 
        String realnameAuthStatus = entity.getRealnameAuthStatus();
        if (realnameAuthStatus != null) {
            stmt.bindString(9, realnameAuthStatus);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public LoginUserAccount readEntity(Cursor cursor, int offset) {
        LoginUserAccount entity = new LoginUserAccount( //
            cursor.getString(offset + 0), // phoneNumber
            cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // lastUpdateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImgUrl
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // currentUser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // codeId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idImg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // realnameAuthStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginUserAccount entity, int offset) {
        entity.setPhoneNumber(cursor.getString(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setLastUpdateTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentUser(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setCodeId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRealnameAuthStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LoginUserAccount entity, long rowId) {
        return entity.getPhoneNumber();
    }
    
    @Override
    public String getKey(LoginUserAccount entity) {
        if(entity != null) {
            return entity.getPhoneNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginUserAccount entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
