package gen.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import gen.greendao.bean.ICallLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ICALL_LOG".
*/
public class ICallLogDao extends AbstractDao<ICallLog, String> {

    public static final String TABLENAME = "ICALL_LOG";

    /**
     * Properties of entity ICallLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", true, "UUID");
        public final static Property MasterPhone = new Property(1, String.class, "masterPhone", false, "MASTER_PHONE");
        public final static Property CallNum = new Property(2, String.class, "callNum", false, "CALL_NUM");
        public final static Property CustomerName = new Property(3, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property CustomerAddress = new Property(4, String.class, "customerAddress", false, "CUSTOMER_ADDRESS");
        public final static Property EmailAddress = new Property(5, String.class, "emailAddress", false, "EMAIL_ADDRESS");
        public final static Property CallDate = new Property(6, long.class, "callDate", false, "CALL_DATE");
        public final static Property CallDurationTime = new Property(7, long.class, "callDurationTime", false, "CALL_DURATION_TIME");
        public final static Property RecordingFilePath = new Property(8, String.class, "recordingFilePath", false, "RECORDING_FILE_PATH");
        public final static Property HadLan = new Property(9, int.class, "hadLan", false, "HAD_LAN");
        public final static Property HadPie = new Property(10, int.class, "hadPie", false, "HAD_PIE");
        public final static Property Note = new Property(11, String.class, "note", false, "NOTE");
        public final static Property OrderNumber = new Property(12, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property HadUpload = new Property(13, int.class, "hadUpload", false, "HAD_UPLOAD");
        public final static Property HadSync = new Property(14, int.class, "hadSync", false, "HAD_SYNC");
        public final static Property CallType = new Property(15, int.class, "callType", false, "CALL_TYPE");
    }


    public ICallLogDao(DaoConfig config) {
        super(config);
    }
    
    public ICallLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ICALL_LOG\" (" + //
                "\"UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid
                "\"MASTER_PHONE\" TEXT NOT NULL ," + // 1: masterPhone
                "\"CALL_NUM\" TEXT NOT NULL ," + // 2: callNum
                "\"CUSTOMER_NAME\" TEXT," + // 3: customerName
                "\"CUSTOMER_ADDRESS\" TEXT," + // 4: customerAddress
                "\"EMAIL_ADDRESS\" TEXT," + // 5: emailAddress
                "\"CALL_DATE\" INTEGER NOT NULL ," + // 6: callDate
                "\"CALL_DURATION_TIME\" INTEGER NOT NULL ," + // 7: callDurationTime
                "\"RECORDING_FILE_PATH\" TEXT," + // 8: recordingFilePath
                "\"HAD_LAN\" INTEGER NOT NULL ," + // 9: hadLan
                "\"HAD_PIE\" INTEGER NOT NULL ," + // 10: hadPie
                "\"NOTE\" TEXT," + // 11: note
                "\"ORDER_NUMBER\" TEXT," + // 12: orderNumber
                "\"HAD_UPLOAD\" INTEGER NOT NULL ," + // 13: hadUpload
                "\"HAD_SYNC\" INTEGER NOT NULL ," + // 14: hadSync
                "\"CALL_TYPE\" INTEGER NOT NULL );"); // 15: callType
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ICALL_LOG_UUID ON ICALL_LOG" +
                " (\"UUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ICALL_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ICallLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
        stmt.bindString(2, entity.getMasterPhone());
        stmt.bindString(3, entity.getCallNum());
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(4, customerName);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(5, customerAddress);
        }
 
        String emailAddress = entity.getEmailAddress();
        if (emailAddress != null) {
            stmt.bindString(6, emailAddress);
        }
        stmt.bindLong(7, entity.getCallDate());
        stmt.bindLong(8, entity.getCallDurationTime());
 
        String recordingFilePath = entity.getRecordingFilePath();
        if (recordingFilePath != null) {
            stmt.bindString(9, recordingFilePath);
        }
        stmt.bindLong(10, entity.getHadLan());
        stmt.bindLong(11, entity.getHadPie());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(13, orderNumber);
        }
        stmt.bindLong(14, entity.getHadUpload());
        stmt.bindLong(15, entity.getHadSync());
        stmt.bindLong(16, entity.getCallType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ICallLog entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid());
        stmt.bindString(2, entity.getMasterPhone());
        stmt.bindString(3, entity.getCallNum());
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(4, customerName);
        }
 
        String customerAddress = entity.getCustomerAddress();
        if (customerAddress != null) {
            stmt.bindString(5, customerAddress);
        }
 
        String emailAddress = entity.getEmailAddress();
        if (emailAddress != null) {
            stmt.bindString(6, emailAddress);
        }
        stmt.bindLong(7, entity.getCallDate());
        stmt.bindLong(8, entity.getCallDurationTime());
 
        String recordingFilePath = entity.getRecordingFilePath();
        if (recordingFilePath != null) {
            stmt.bindString(9, recordingFilePath);
        }
        stmt.bindLong(10, entity.getHadLan());
        stmt.bindLong(11, entity.getHadPie());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(13, orderNumber);
        }
        stmt.bindLong(14, entity.getHadUpload());
        stmt.bindLong(15, entity.getHadSync());
        stmt.bindLong(16, entity.getCallType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public ICallLog readEntity(Cursor cursor, int offset) {
        ICallLog entity = new ICallLog( //
            cursor.getString(offset + 0), // uuid
            cursor.getString(offset + 1), // masterPhone
            cursor.getString(offset + 2), // callNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // customerAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // emailAddress
            cursor.getLong(offset + 6), // callDate
            cursor.getLong(offset + 7), // callDurationTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // recordingFilePath
            cursor.getInt(offset + 9), // hadLan
            cursor.getInt(offset + 10), // hadPie
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // note
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // orderNumber
            cursor.getInt(offset + 13), // hadUpload
            cursor.getInt(offset + 14), // hadSync
            cursor.getInt(offset + 15) // callType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ICallLog entity, int offset) {
        entity.setUuid(cursor.getString(offset + 0));
        entity.setMasterPhone(cursor.getString(offset + 1));
        entity.setCallNum(cursor.getString(offset + 2));
        entity.setCustomerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomerAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmailAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCallDate(cursor.getLong(offset + 6));
        entity.setCallDurationTime(cursor.getLong(offset + 7));
        entity.setRecordingFilePath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHadLan(cursor.getInt(offset + 9));
        entity.setHadPie(cursor.getInt(offset + 10));
        entity.setNote(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHadUpload(cursor.getInt(offset + 13));
        entity.setHadSync(cursor.getInt(offset + 14));
        entity.setCallType(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ICallLog entity, long rowId) {
        return entity.getUuid();
    }
    
    @Override
    public String getKey(ICallLog entity) {
        if(entity != null) {
            return entity.getUuid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ICallLog entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
